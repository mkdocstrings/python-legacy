{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Overview","text":"mkdocstrings-python-legacy <p>The legacy Python handler for mkdocstrings.</p> <p> </p> <p></p> <p>Warning</p> <p>We suggest using the new handler instead: mkdocstrings-python.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install this handler as a mkdocstrings extra:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings[python-legacy]&gt;=0.18\",\n]\n</code></pre> <p>You can also explicitely depend on the handler:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-python-legacy\",\n]\n</code></pre>"},{"location":"#preview","title":"Preview","text":""},{"location":"#features","title":"Features","text":"<ul> <li> <p>Data collection from source code: collection of the object-tree and the docstrings is done thanks to   pytkdocs.</p> </li> <li> <p>Support for type annotations: pytkdocs collects your type annotations and mkdocstrings uses them   to display parameters types or return types.</p> </li> <li> <p>Recursive documentation of Python objects: just use the module dotted-path as identifier, and you get the full   module docs. You don't need to inject documentation for each class, function, etc.</p> </li> <li> <p>Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will   be recognized by Griffe in modules, classes and even in <code>__init__</code> methods.</p> </li> <li> <p>Multiple docstring-styles support: common support for Google-style, Numpydoc-style,   and Sphinx-style docstrings.</p> </li> <li> <p>Admonition support in Google docstrings: blocks like <code>Note:</code> or <code>Warning:</code> will be transformed   to their admonition equivalent.   We do not support nested admonitions in docstrings!</p> </li> <li> <p>Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table   of Contents, which is nicely display by the Material theme. Thanks to mkdocstrings cross-reference ability,   you can reference other objects within your docstrings, with the classic Markdown syntax:   <code>[this object][package.module.object]</code> or directly with <code>[package.module.object][]</code></p> </li> <li> <p>Source code display: mkdocstrings can add a collapsible div containing the highlighted source code   of the Python object.</p> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#025-2025-03-09","title":"0.2.5 - 2025-03-09","text":"<p>Compare with 0.2.4</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Depend on mkdocstrings 0.28.3 (a2317df by Timoth\u00e9e Mazzucotelli).</li> <li>Drop support for Python 3.8 (2907379 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#024-2024-09-07","title":"0.2.4 - 2024-09-07","text":"<p>Compare with 0.2.3</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Pass down docstring style and options to pytkdocs (68934d5 by Timoth\u00e9e Mazzucotelli). Issue-4</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Update cross-reference markup to new autorefs format (89592bd by Matthias Schoettle). Issue-6, PR-7, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#023-2022-05-28","title":"0.2.3 - 2022-05-28","text":"<p>Compare with 0.2.2</p>"},{"location":"changelog/#packaging-dependencies","title":"Packaging / Dependencies","text":"<ul> <li>Depend on mkdocstrings 0.19 (71123dc by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Unify default configurations (47c53fc by Timoth\u00e9e Mazzucotelli).</li> <li>Stop using deprecated base classes (5a28b12 by Timoth\u00e9e Mazzucotelli).</li> <li>Use new <code>mkdocstrings_handlers</code> namespace (d688c87 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#022-2022-02-19","title":"0.2.2 - 2022-02-19","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Handle empty error in JSON output (0e7ab59 by rachmadani haryono). PR #1</li> </ul>"},{"location":"changelog/#021-2022-02-05","title":"0.2.1 - 2022-02-05","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Require at least mkdocstrings 0.18 (09d8e9c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2022-02-03","title":"0.2.0 - 2022-02-03","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add <code>show_signature</code> rendering option (e741b37 by Will Da Silva).</li> </ul>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Depend on mkdocstrings (a154c05 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Add user warning about mkdocstrings extra (71ea2d8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2021-12-18","title":"0.1.0 - 2021-12-18","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Copy code from mkdocstrings (720f91e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd python-legacy\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocstrings-python-legacy. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.6</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.7</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0, &gt;=1.1</code> <code>3.0.2</code> BSD License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.4</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.1</code> <code>1.4.1</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0, &gt;=0.2</code> <code>0.2.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.28.3</code> <code>0.28.3</code> ISC packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.6</code> MIT pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9, &gt;=6.3</code> <code>10.14.3</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytkdocs Load Python objects documentation. <code>&gt;=0.14</code> <code>0.16.5</code> ISC PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9, &gt;=4.1</code> <code>4.12.2</code> Python Software Foundation License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.3</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.26.6</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.6.12</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6</code> <code>1.6.0.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.1</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.0.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0, &gt;=1.1</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.4</code> <code>1.6.1</code> BSD-2-Clause mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0, &gt;=0.2</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.2</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.1</code> <code>0.1.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.5+insiders.4.53.15</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.6</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9, &gt;=6.3</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.1</code> MIT PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.11.6</code> Apache Software License requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.9.10</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20241204</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20241230</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9, &gt;=4.1</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.3.4</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2021, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>This is the documentation for the LEGACY Python handler</p> <p>To read the documentation for the NEW handler, go to the new handler documentation.</p> <p>The tool used by the legacy Python handler to collect documentation from Python source code is <code>pytkdocs</code>. It stands for (Python) Take Docs, and is supposed to be a pun on MkDocs (Make Docs?).</p> <p>Like every handler, the legacy Python handler accepts both global and local options.</p>"},{"location":"usage/#global-only-options","title":"Global-only options","text":"<p>Some options are global only, and go directly under the handler's name.</p> <ul> <li> <p><code>import</code>: this option is used to import Sphinx-compatible objects inventories from other     documentation sites. For example, you can import the standard library     objects inventory like this:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        - https://docs.python-requests.org/en/master/objects.inv\n</code></pre> <p>When importing an inventory, you enable automatic cross-references to other documentation sites like the standard library docs or any third-party package docs. Typically, you want to import the inventories of your project's dependencies, at least those that are used in the public API. </p> <p>Note</p> <p>This global option is common to all handlers, however they might implement it differently (or not even implement it).</p> </li> <li> <p><code>paths</code>: this option is used to provide filesystem paths in which to search for Python modules.     Non-absolute paths are computed as relative to MkDocs configuration file. Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [src]  # search packages in the src folder\n</code></pre> <p>More details at Finding modules.</p> </li> <li> <p><code>setup_commands</code>: this option is used to instruct <code>pytkdocs</code>, the tool responsible     for collecting data from sources, to run Python statements before starting to collect data.     It is declared as a list of strings:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        setup_commands:\n        - import os\n        - import django\n        - os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"my_django_app.settings\")\n        - django.setup()\n</code></pre> <p>The setup commands are executed only once, when the <code>pytkdocs</code> background process is started.</p> </li> </ul>"},{"location":"usage/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: package.module.class\n    options:\n      do_something: false\n</code></pre> <p>These options affect how the documentation is collected from sources and renderered: headings, members, docstrings, etc.</p> <p>Headings options:</p> <ul> <li><code>heading_level</code> (<code>int</code>): The initial heading level to use. Default: <code>2</code>.</li> <li><code>show_root_heading</code> (<code>bool</code>): Show the heading of the object at the root of the documentation tree     (i.e. the object referenced by the identifier after <code>:::</code>). Default: <code>False</code>.</li> <li><code>show_root_toc_entry</code> (<code>bool</code>): If the root heading is not shown, at least add a ToC entry for it. Default: <code>True</code>.</li> <li><code>show_root_full_path</code> (<code>bool</code>): Show the full Python path for the root object heading. Default: <code>True</code>.</li> <li><code>show_root_members_full_path</code> (<code>bool</code>): Show the full Python path of the root members. Default: <code>False</code>.</li> <li><code>show_object_full_path</code> (<code>bool</code>): Show the full Python path of every object. Default: <code>False</code>.</li> <li><code>show_category_heading</code> (<code>bool</code>): When grouped by categories, show a heading for each category. Default: <code>False</code>.</li> </ul> <p>Members options:</p> <ul> <li><code>members</code> (<code>list[str] | False | None</code>): An explicit list of members to render. Default: <code>None</code>.</li> <li><code>members_order</code> (<code>str</code>): The members ordering to use. Options: <code>alphabetical</code> - order by the members names,     <code>source</code> - order members as they appear in the source file. Default: <code>\"alphabetical\"</code>.</li> <li><code>filters</code> (<code>list[str] | None</code>): A list of filters applied to filter objects based on their name.     A filter starting with <code>!</code> will exclude matching objects instead of including them.     The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively     to lower members in the hierarchy). Default: <code>[\"!^_[^_]\"]</code>.</li> <li><code>group_by_category</code> (<code>bool</code>): Group the object's children by categories: attributes, classes, functions, and modules. Default: <code>True</code>.</li> </ul> <p>Docstrings options:</p> <ul> <li><code>docstring_style</code> (<code>str</code>): The docstring style to use: <code>google</code>, <code>numpy</code>, <code>restructured-text</code>, or <code>None</code>. Default: <code>\"google\"</code>.</li> <li><code>docstring_options</code> (<code>dict</code>): The options for the docstring parser. See parsers under <code>pytkdocs.parsers.docstrings</code>.</li> <li><code>show_if_no_docstring</code> (<code>bool</code>): Show the object heading even if it has no docstring or children with docstrings. Default: <code>False</code>.</li> </ul> <p>Signatures/annotations options:</p> <ul> <li><code>show_signature</code> (<code>bool</code>): Show methods and functions signatures. Default: <code>True</code>.</li> <li><code>show_signature_annotations</code> (<code>bool</code>): Show the type annotations in methods and functions signatures. Default: <code>False</code>.</li> </ul> <p>Additional options:</p> <ul> <li><code>show_bases</code> (<code>bool</code>): Show the base classes of a class. Default: <code>True</code>.</li> <li><code>show_source</code> (<code>bool</code>): Show the source code of this object. Default: <code>True</code>.</li> </ul>"},{"location":"usage/#supported-docstrings-styles","title":"Supported docstrings styles","text":"<p>Right now, <code>pytkdocs</code> supports the Google-style, Numpy-style and reStructuredText-style docstring formats. The style used by default is the Google-style. You can configure what style you want to use with the <code>docstring_style</code> and <code>docstring_options</code> options, both globally or per autodoc instruction.</p>"},{"location":"usage/#google-style","title":"Google-style","text":"<p>You can see examples of Google-style docstrings in Napoleon's documentation.</p>"},{"location":"usage/#sections","title":"Sections","text":"<p>Docstrings sections are parsed by <code>pytkdocs</code> and rendered by mkdocstrings. Supported sections are:</p> <ul> <li><code>Arguments</code> (or <code>Args</code>, <code>Parameters</code>, <code>Params</code>)</li> <li><code>Attributes</code></li> <li><code>Examples</code> (or <code>Example</code>)</li> <li><code>Raises</code> (or <code>Raise</code>, <code>Except</code>, <code>Exceptions</code>)</li> <li><code>Returns</code> (or <code>Return</code>)</li> </ul>"},{"location":"usage/#admonitions","title":"Admonitions","text":"<p>Additionally, any section that is not recognized will be transformed into its admonition equivalent. For example:</p> OriginalModifiedResult <pre><code>\"\"\"\nNote: You can disable this behavior with the `replace_admonitions` option.\n    To prevent `pytkdocs` from converting sections to admonitions,\n    use the `replace_admonitions`:\n\n    ```md\n    ::: my_package.my_module\n        options:\n          docstring_style: google  # this is the default\n          docstring_options:\n            replace_admonitions: no \n    ```\n\n    So meta!\n\"\"\"\n</code></pre> <pre><code>\"\"\"\n!!! note \"You can disable this behavior with the `replace_admonitions` option.\"\n    To prevent `pytkdocs` from converting sections to admonitions,\n    use the `replace_admonitions`:\n\n    ```md\n    ::: my_package.my_module\n        options:\n          docstring_style: google  # this is the default\n          docstring_options:\n            replace_admonitions: no \n    ```\n\n    So meta!\n\"\"\"\n</code></pre> <p>You can disable this behavior with the <code>replace_admonitions</code> parser option</p> <p>To prevent <code>pytkdocs</code> from converting sections to admonitions, use the <code>replace_admonitions</code> parser option:</p> <pre><code>::: my_package.my_module\n    options:\n      docstring_style: google  # this is the default\n      docstring_options:\n        replace_admonitions: no \n</code></pre> <p>So meta!</p> <p>As shown in the above example, this can be disabled with the <code>replace_admonitions</code> option of the Google-style parser:</p> <pre><code>::: my_package.my_module\n    options:\n      docstring_style: google  # this is the default\n      docstring_options:\n        replace_admonitions: no \n</code></pre>"},{"location":"usage/#annotations","title":"Annotations","text":"<p>Type annotations are read both in the code and in the docstrings.</p> <p>Example with a function</p> <p>Expand the source at the end to see the original code!</p> <p>A short description of this function.</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>int</code> <p>An integer?</p> required <code>param2</code> <code>Optional[str]</code> <p>A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines consistently.</p> <p>Complex markup is supported in sections items.</p> <pre><code>I'm a code block!\n</code></pre> <code>None</code> Source code in <code>snippets/function_annotations_google.py</code> <pre><code>def my_function(param1: int, param2: Optional[str] = None) -&gt; str:\n    \"\"\"A short description of this function.\n\n    Arguments:\n        param1: An integer?\n        param2: A string? If you have a long description,\n            you can split it on multiple lines.\n            Just remember to indent those lines consistently.\n\n            Complex markup is supported in sections items.\n\n                I'm a code block!\n    \"\"\"\n    return f\"{param2}{param1}\"\n</code></pre>"},{"location":"usage/#numpy-style","title":"Numpy-style","text":"<p>Extra dependency required</p> <p>You'll need an extra dependency to parse Numpy-style docstrings: <pre><code>pdm add -d --group docs 'pytkdocs[numpy-style]'\npoetry add -D 'pytkdocs[numpy-style]'\npip install 'pytkdocs[numpy-style]'\n# etc.\n</code></pre></p> <p>Note</p> <p>As Numpy-style is partially supported by the underlying parser, you may experience problems in the building process if your docstring has a <code>Methods</code> section in the class docstring (see #366).</p> <p>You can see examples of Numpy-style docstrings in numpydoc's documentation.</p>"},{"location":"usage/#restructuredtext-style","title":"reStructuredText-style","text":"<p>Partial support</p> <p>Only RST-style is supported, not the whole RST markup specification.</p> <p>You can see examples of reStructuredText-style docstrings in Sphinx's documentation.</p>"},{"location":"usage/#sections_1","title":"Sections","text":"<p>Docstrings directives are parsed by <code>pytkdocs</code> and rendered by mkdocstrings. Supported directives are:</p> <ul> <li><code>param</code> (or <code>parameter</code>, <code>arg</code>, <code>argument</code>, <code>key</code>, <code>keyword</code>)</li> <li><code>type</code></li> <li><code>raises</code> (or <code>raise</code>, <code>except</code>, <code>exception</code>)</li> <li><code>var</code> (or <code>ivar</code>, <code>cvar</code>)</li> <li><code>vartype</code></li> <li><code>returns</code> (or <code>return1</code>)</li> <li><code>rtype</code></li> </ul> <p>Details about how to use each directive can be found in the Sphinx domain documentation</p>"},{"location":"usage/#annotations_1","title":"Annotations","text":"<p>Type annotations are read both in the code and in the docstrings.</p> <p>Example with a function</p> <p>Expand the source at the end to see the original code!</p> <p>A short description of this function.</p> <p>Complex markup is supported in the main description section.</p> <pre><code>I'm a code block!\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>int</code> <p>An integer?</p> required <code>param2</code> <code>Optional[str]</code> <p>A string? If you have a long description, you can split it on multiple lines.</p> <code>None</code> Source code in <code>snippets/function_annotations_rst.py</code> <pre><code>def my_function(param1: int, param2: Optional[str] = None) -&gt; str:\n    \"\"\"A short description of this function.\n\n    Complex markup is supported in the main description section.\n\n        I'm a code block!\n\n    :param param1: An integer?\n    :param param2: A string? If you have a long description,\n        you can split it on multiple lines.\n    \"\"\"\n    return f\"{param2}{param1}\"\n</code></pre>"},{"location":"usage/#finding-modules","title":"Finding modules","text":"<p>There are multiple ways to tell the handler where to find your packages/modules.</p> <p>The recommended method is to use the <code>paths</code> option, as it's the only one that works with the <code>-f</code> option of MkDocs, allowing to build the documentation from any location on the file system. Indeed, the paths provided with the <code>paths</code> option are computed as relative to the configuration file (mkdocs.yml), so that the current working directory has no impact on the build process: you can build the docs from any location on your filesystem.</p>"},{"location":"usage/#using-the-paths-option","title":"Using the <code>paths</code> option","text":"<p>This is the recommended method</p> <ol> <li> <p>mkdocs.yml in root, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [.]  # actually not needed, default\n</code></pre> </li> <li> <p>mkdocs.yml in root, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [src]\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [..]\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [../src]\n</code></pre> </li> </ol> <p>Except for case 1, which is supported by default, we strongly recommend to set the path to your packages using this option, even if it works without it (for example because your project manager automatically adds <code>src</code> to PYTHONPATH), to make sure anyone can build your docs from any location on their filesystem.</p> <p>Behind the scenes, the handler will actually insert the specified paths in front of <code>sys.path</code>.</p>"},{"location":"usage/#using-the-pythonpath-environment-variable","title":"Using the PYTHONPATH environment variable","text":"<p>This method has limitations</p> <p>This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the <code>paths</code> method instead.</p> <p>You can take advantage of the usual Python loading mechanisms. In Bash and other shells, you can run your command like this (note the prepended <code>PYTHONPATH=...</code>):</p> <ol> <li> <p>mkdocs.yml in root, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=. mkdocs build  # actually not needed, default\n</code></pre> </li> <li> <p>mkdocs.yml in root, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=src mkdocs build\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=. mkdocs build -f docs/mkdocs.yml\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=src mkdocs build -f docs/mkdocs.yml\n</code></pre> </li> </ol>"},{"location":"usage/#installing-your-package-in-the-current-python-environment","title":"Installing your package in the current Python environment","text":"<p>This method has limitations</p> <p>This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the <code>paths</code> method instead.</p> <p>Install your package in the current environment, and run MkDocs:</p> pipPDMPoetry <pre><code>. venv/bin/activate\npip install -e .\nmkdocs build\n</code></pre> <pre><code>pdm install\npdm run mkdocs build\n</code></pre> <pre><code>poetry install\npoetry run mkdocs build\n</code></pre>"},{"location":"usage/#using-the-setup-commands","title":"Using the setup commands","text":"<p>This method has limitations</p> <p>This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend to use the <code>paths</code> method instead.</p> <p>You can use the setup commands to modify <code>sys.path</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        setup_commands:\n        - import sys\n        - sys.path.append(\"src\")\n        # or sys.path.insert(0, \"src\")\n</code></pre>"},{"location":"usage/#mocking-libraries","title":"Mocking libraries","text":"<p>You may want to generate documentation for a package while its dependencies are not available. The Python handler provides itself no builtin way to mock libraries, but you can use the <code>setup_commands</code> to mock them manually:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        setup_commands:\n        - import sys\n        - from unittest.mock import MagicMock as mock\n        - sys.modules[\"lib1\"] = mock()\n        - sys.modules[\"lib2\"] = mock()\n        - sys.modules[\"lib2.module1\"] = mock()\n        - sys.modules[\"lib2.module1.moduleB\"] = mock()\n        # etc\n</code></pre>"},{"location":"usage/#recommended-style-material","title":"Recommended style (Material)","text":"<p>Here are some CSS rules for the Material for MkDocs theme:</p> <pre><code>/* Indentation. */\ndiv.doc-contents:not(.first) {\n  padding-left: 25px;\n  border-left: .05rem solid var(--md-typeset-table-color);\n}\n</code></pre>"},{"location":"usage/#recommended-style-readthedocs","title":"Recommended style (ReadTheDocs)","text":"<p>Here are some CSS rules for the built-in ReadTheDocs theme:</p> <pre><code>/* Indentation. */\ndiv.doc-contents:not(.first) {\n  padding-left: 25px;\n  border-left: 4px solid rgba(230, 230, 230);\n}\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/","title":"API reference","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python","title":"<code>mkdocstrings_handlers.python</code>  <code>special</code>","text":"<p>This package implements a handler for the Python language.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python-modules","title":"Modules","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug","title":"<code>debug</code>","text":"<p>Debugging utilities.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug-classes","title":"Classes","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.Environment","title":"<code> Environment        </code>  <code>dataclass</code>","text":"<p>Dataclass to store environment information.</p> Source code in <code>python/debug.py</code> <pre><code>@dataclass\nclass Environment:\n    \"\"\"Dataclass to store environment information.\"\"\"\n\n    interpreter_name: str\n    \"\"\"Python interpreter name.\"\"\"\n    interpreter_version: str\n    \"\"\"Python interpreter version.\"\"\"\n    platform: str\n    \"\"\"Operating System.\"\"\"\n    packages: list[Package]\n    \"\"\"Installed packages.\"\"\"\n    variables: list[Variable]\n    \"\"\"Environment variables.\"\"\"\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.Environment-attributes","title":"Attributes","text":"<code>interpreter_name: str</code> <code>dataclass-field</code> \u00a4 <p>Python interpreter name.</p> <code>interpreter_version: str</code> <code>dataclass-field</code> \u00a4 <p>Python interpreter version.</p> <code>packages: list[mkdocstrings_handlers.python.debug.Package]</code> <code>dataclass-field</code> \u00a4 <p>Installed packages.</p> <code>platform: str</code> <code>dataclass-field</code> \u00a4 <p>Operating System.</p> <code>variables: list[mkdocstrings_handlers.python.debug.Variable]</code> <code>dataclass-field</code> \u00a4 <p>Environment variables.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.Package","title":"<code> Package        </code>  <code>dataclass</code>","text":"<p>Dataclass describing a Python package.</p> Source code in <code>python/debug.py</code> <pre><code>@dataclass\nclass Package:\n    \"\"\"Dataclass describing a Python package.\"\"\"\n\n    name: str\n    \"\"\"Package name.\"\"\"\n    version: str\n    \"\"\"Package version.\"\"\"\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.Package-attributes","title":"Attributes","text":"<code>name: str</code> <code>dataclass-field</code> \u00a4 <p>Package name.</p> <code>version: str</code> <code>dataclass-field</code> \u00a4 <p>Package version.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.Variable","title":"<code> Variable        </code>  <code>dataclass</code>","text":"<p>Dataclass describing an environment variable.</p> Source code in <code>python/debug.py</code> <pre><code>@dataclass\nclass Variable:\n    \"\"\"Dataclass describing an environment variable.\"\"\"\n\n    name: str\n    \"\"\"Variable name.\"\"\"\n    value: str\n    \"\"\"Variable value.\"\"\"\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.Variable-attributes","title":"Attributes","text":"<code>name: str</code> <code>dataclass-field</code> \u00a4 <p>Variable name.</p> <code>value: str</code> <code>dataclass-field</code> \u00a4 <p>Variable value.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug-functions","title":"Functions","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.get_debug_info","title":"<code>get_debug_info() -&gt; Environment</code>","text":"<p>Get debug/environment information.</p> <p>Returns:</p> Type Description <code>Environment</code> <p>Environment information.</p> Source code in <code>python/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"mkdocstrings-python-legacy\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"MKDOCSTRINGS_PYTHON_LEGACY\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.get_version","title":"<code>get_version(dist: str = 'mkdocstrings-python-legacy') -&gt; str</code>","text":"<p>Get version of the given distribution.</p> <p>Parameters:</p> Name Type Description Default <code>dist</code> <code>str</code> <p>A distribution name.</p> <code>'mkdocstrings-python-legacy'</code> <p>Returns:</p> Type Description <code>str</code> <p>A version number.</p> Source code in <code>python/debug.py</code> <pre><code>def get_version(dist: str = \"mkdocstrings-python-legacy\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.debug.print_debug_info","title":"<code>print_debug_info() -&gt; None</code>","text":"<p>Print debug/environment information.</p> Source code in <code>python/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version}\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler","title":"<code>handler</code>","text":"<p>This module implements a handler for the Python language.</p> <p>It collects data with <code>pytkdocs</code>.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler-classes","title":"Classes","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler.PythonHandler","title":"<code> PythonHandler            (BaseHandler)         </code>","text":"<p>The Python handler class.</p> Source code in <code>python/handler.py</code> <pre><code>class PythonHandler(BaseHandler):\n    \"\"\"The Python handler class.\"\"\"\n\n    name: ClassVar[str] = \"python\"\n    \"\"\"The handler name.\"\"\"\n    domain: ClassVar[str] = \"py\"  # to match Sphinx's default domain\n    \"\"\"The domain of the handler.\"\"\"\n    enable_inventory: ClassVar[bool] = True\n    \"\"\"Whether the handler supports inventory files.\"\"\"\n\n    fallback_theme: ClassVar[str] = \"material\"\n    \"\"\"The fallback theme to use when the user-selected theme is not supported.\"\"\"\n    fallback_config: ClassVar[dict] = {\"docstring_style\": \"markdown\", \"filters\": [\"!.*\"]}\n    \"\"\"The configuration used when falling back to re-collecting an object to get its anchor.\n\n    This configuration is used in [`Handlers.get_anchors`][mkdocstrings.Handlers.get_anchors].\n\n    When trying to fix (optional) cross-references, the autorefs plugin will try to collect\n    an object with every configured handler until one succeeds. It will then try to get\n    an anchor for it. It's because objects can have multiple identifiers (aliases),\n    for example their definition path and multiple import paths in Python.\n\n    When re-collecting the object, we have no use for its members, or for its docstring being parsed.\n    This is why the fallback configuration filters every member out, and uses the Markdown style,\n    which we know will not generate any warnings.\n    \"\"\"\n\n    default_config: ClassVar[dict] = {\n        \"filters\": [\"!^_[^_]\"],\n        \"show_root_heading\": False,\n        \"show_root_toc_entry\": True,\n        \"show_root_full_path\": True,\n        \"show_root_members_full_path\": False,\n        \"show_object_full_path\": False,\n        \"show_category_heading\": False,\n        \"show_if_no_docstring\": False,\n        \"show_signature\": True,\n        \"show_signature_annotations\": False,\n        \"show_source\": True,\n        \"show_bases\": True,\n        \"group_by_category\": True,\n        \"heading_level\": 2,\n        \"members_order\": \"alphabetical\",\n    }\n    \"\"\"\n    **Headings options:**\n\n    - `heading_level` (`int`): The initial heading level to use. Default: `2`.\n    - `show_root_heading` (`bool`): Show the heading of the object at the root of the documentation tree\n        (i.e. the object referenced by the identifier after `:::`). Default: `False`.\n    - `show_root_toc_entry` (`bool`): If the root heading is not shown, at least add a ToC entry for it. Default: `True`.\n    - `show_root_full_path` (`bool`): Show the full Python path for the root object heading. Default: `True`.\n    - `show_root_members_full_path` (`bool`): Show the full Python path of the root members. Default: `False`.\n    - `show_object_full_path` (`bool`): Show the full Python path of every object. Default: `False`.\n    - `show_category_heading` (`bool`): When grouped by categories, show a heading for each category. Default: `False`.\n\n    **Members options:**\n\n    - `members` (`list[str] | False | None`): An explicit list of members to render. Default: `None`.\n    - `members_order` (`str`): The members ordering to use. Options: `alphabetical` - order by the members names,\n        `source` - order members as they appear in the source file. Default: `\"alphabetical\"`.\n    - `filters` (`list[str] | None`): A list of filters applied to filter objects based on their name.\n        A filter starting with `!` will exclude matching objects instead of including them.\n        The `members` option takes precedence over `filters` (filters will still be applied recursively\n        to lower members in the hierarchy). Default: `[\"!^_[^_]\"]`.\n    - `group_by_category` (`bool`): Group the object's children by categories: attributes, classes, functions, and modules. Default: `True`.\n\n    **Docstrings options:**\n\n    - `docstring_style` (`str`): The docstring style to use: `google`, `numpy`, `restructured-text`, or `None`. Default: `\"google\"`.\n    - `docstring_options` (`dict`): The options for the docstring parser. See parsers under [`pytkdocs.parsers.docstrings`][].\n    - `show_if_no_docstring` (`bool`): Show the object heading even if it has no docstring or children with docstrings. Default: `False`.\n\n    **Signatures/annotations options:**\n\n    - `show_signature` (`bool`): Show methods and functions signatures. Default: `True`.\n    - `show_signature_annotations` (`bool`): Show the type annotations in methods and functions signatures. Default: `False`.\n\n    **Additional options:**\n\n    - `show_bases` (`bool`): Show the base classes of a class. Default: `True`.\n    - `show_source` (`bool`): Show the source code of this object. Default: `True`.\n    \"\"\"\n\n    def __init__(self, config: dict[str, Any], base_dir: Path, **kwargs: Any) -&gt; None:\n        \"\"\"Initialize the handler.\n\n        When instantiating a Python handler, we open a `pytkdocs` subprocess in the background with `subprocess.Popen`.\n        It will allow us to feed input to and read output from this subprocess, keeping it alive during\n        the whole documentation generation. Spawning a new Python subprocess for each \"autodoc\" instruction would be\n        too resource intensive, and would slow down `mkdocstrings` a lot.\n\n        Parameters:\n            config: The handler configuration.\n            base_dir: The base directory of the project.\n            **kwargs: Arguments passed to the parent constructor.\n        \"\"\"\n        super().__init__(**kwargs)\n\n        self.base_dir = base_dir\n        self.config = config\n        self.global_options = config.get(\"options\", {})\n\n        logger.debug(\"Opening 'pytkdocs' subprocess\")\n        env = os.environ.copy()\n        env[\"PYTHONUNBUFFERED\"] = \"1\"\n\n        paths = config.get(\"paths\") or []\n        if not paths and self.base_dir:\n            paths.append(self.base_dir)\n        search_paths = []\n        for path in paths:\n            if not os.path.isabs(path) and self.base_dir:\n                path = os.path.abspath(os.path.join(self.base_dir, path))  # noqa: PLW2901\n            if path not in search_paths:\n                search_paths.append(path)\n        self._paths = search_paths\n\n        commands = []\n\n        if search_paths:\n            commands.extend([f\"sys.path.insert(0, {path!r})\" for path in reversed(search_paths)])\n\n        if setup_commands := config.get(\"setup_commands\"):\n            # prevent the Python interpreter or the setup commands\n            # from writing to stdout as it would break pytkdocs output\n            commands.extend(\n                [\n                    \"from io import StringIO\",\n                    \"sys.stdout = StringIO()\",  # redirect stdout to memory buffer\n                    *setup_commands,\n                    \"sys.stdout.flush()\",\n                    \"sys.stdout = sys.__stdout__\",  # restore stdout\n                ],\n            )\n\n        if commands:\n            final_commands = [\n                \"import sys\",\n                *commands,\n                \"from pytkdocs.cli import main as pytkdocs\",\n                \"pytkdocs(['--line-by-line'])\",\n            ]\n            cmd = [sys.executable, \"-c\", \"; \".join(final_commands)]\n        else:\n            cmd = [sys.executable, \"-m\", \"pytkdocs\", \"--line-by-line\"]\n\n        self.process = Popen(  # noqa: S603\n            cmd,\n            universal_newlines=True,\n            stdout=PIPE,\n            stdin=PIPE,\n            bufsize=-1,\n            env=env,\n        )\n\n    def get_inventory_urls(self) -&gt; list[tuple[str, dict[str, Any]]]:\n        \"\"\"Return the URLs of the inventory files to download.\"\"\"\n        return [\n            (inv.pop(\"url\"), inv) if isinstance(inv, dict) else (inv, {})\n            for inv in deepcopy(self.config.get(\"import\", []))\n        ]\n\n    @classmethod\n    def load_inventory(\n        cls,\n        in_file: BinaryIO,\n        url: str,\n        base_url: Optional[str] = None,\n        **kwargs: Any,  # noqa: ARG003\n    ) -&gt; Iterator[tuple[str, str]]:\n        \"\"\"Yield items and their URLs from an inventory file streamed from `in_file`.\n\n        This implements mkdocstrings' `load_inventory` \"protocol\" (see plugin.py).\n\n        Arguments:\n            in_file: The binary file-like object to read the inventory from.\n            url: The URL that this file is being streamed from (used to guess `base_url`).\n            base_url: The URL that this inventory's sub-paths are relative to.\n            **kwargs: Ignore additional arguments passed from the config.\n\n        Yields:\n            Tuples of (item identifier, item URL).\n        \"\"\"\n        if base_url is None:\n            base_url = posixpath.dirname(url)\n\n        for item in Inventory.parse_sphinx(in_file, domain_filter=(\"py\",)).values():\n            yield item.name, posixpath.join(base_url, item.uri)\n\n    def get_options(self, local_options: Mapping[str, Any]) -&gt; MutableMapping[str, Any]:\n        \"\"\"Return the options to use to collect an object.\n\n        We merge the global options with the options specific to the object being collected.\n\n        Arguments:\n            local_options: The selection options.\n\n        Returns:\n            The options to use to collect an object.\n        \"\"\"\n        return {**self.default_config, **self.global_options, **local_options}\n\n    def collect(self, identifier: str, options: MutableMapping[str, Any]) -&gt; CollectorItem:\n        \"\"\"Collect the documentation tree given an identifier and selection options.\n\n        In this method, we feed one line of JSON to the standard input of the subprocess that was opened\n        during instantiation of the collector. Then we read one line of JSON on its standard output.\n\n        We load back the JSON text into a Python dictionary.\n        If there is a decoding error, we log it as error and raise a CollectionError.\n\n        If the dictionary contains an `error` key, we log it  as error (with the optional `traceback` value),\n        and raise a CollectionError.\n\n        If the dictionary values for keys `loading_errors` and `parsing_errors` are not empty,\n        we log them as warnings.\n\n        Then we pick up the only object within the `objects` list (there's always only one, because we collect\n        them one by one), rebuild it's categories lists\n        (see [`rebuild_category_lists()`][mkdocstrings_handlers.python.rendering.rebuild_category_lists]),\n        and return it.\n\n        Arguments:\n            identifier: The dotted-path of a Python object available in the Python path.\n            options: Selection options, used to alter the data collection done by `pytkdocs`.\n\n        Raises:\n            CollectionError: When there was a problem collecting the object documentation.\n\n        Returns:\n            The collected object-tree.\n        \"\"\"\n        pytkdocs_options = {}\n        for option in (\"filters\", \"members\", \"docstring_style\", \"docstring_options\"):\n            if option in options:\n                pytkdocs_options[option] = options[option]\n\n        logger.debug(\"Preparing input\")\n        json_input = json.dumps({\"objects\": [{\"path\": identifier, **pytkdocs_options}]})\n\n        logger.debug(\"Writing to process' stdin\")\n        self.process.stdin.write(json_input + \"\\n\")  # type: ignore[union-attr]\n        self.process.stdin.flush()  # type: ignore[union-attr]\n\n        logger.debug(\"Reading process' stdout\")\n        stdout = self.process.stdout.readline()  # type: ignore[union-attr]\n\n        logger.debug(\"Loading JSON output as Python object\")\n        try:\n            result = json.loads(stdout)\n        except json.decoder.JSONDecodeError as exception:\n            error = \"\\n\".join((\"Error while loading JSON:\", stdout, traceback.format_exc()))\n            raise CollectionError(error) from exception\n\n        if \"error\" in result:\n            error = result[\"error\"]\n            if \"traceback\" in result:\n                error += f\"\\n{result['traceback']}\"\n            raise CollectionError(error)\n\n        for loading_error in result[\"loading_errors\"]:\n            logger.warning(loading_error)\n\n        for errors in result[\"parsing_errors\"].values():\n            for parsing_error in errors:\n                logger.warning(parsing_error)\n\n        # We always collect only one object at a time\n        result = result[\"objects\"][0]\n\n        logger.debug(\"Rebuilding categories and children lists\")\n        rebuild_category_lists(result)\n\n        return result\n\n    def teardown(self) -&gt; None:\n        \"\"\"Terminate the opened subprocess, set it to `None`.\"\"\"\n        logger.debug(\"Tearing process down\")\n        self.process.terminate()\n\n    def render(self, data: CollectorItem, options: MutableMapping[str, Any]) -&gt; str:\n        \"\"\"Render the collected data into HTML.\"\"\"\n        template = self.env.get_template(f\"{data['category']}.html\")\n\n        # Heading level is a \"state\" variable, that will change at each step\n        # of the rendering recursion. Therefore, it's easier to use it as a plain value\n        # than as an item in a dictionary.\n        heading_level = options[\"heading_level\"]\n\n        members_order = options[\"members_order\"]\n        if members_order == \"alphabetical\":\n            sort_function = sort_key_alphabetical\n        elif members_order == \"source\":\n            sort_function = sort_key_source\n        else:\n            raise PluginError(f\"Unknown members_order '{members_order}', choose between 'alphabetical' and 'source'.\")\n\n        sort_object(data, sort_function=sort_function)\n\n        return template.render(\n            **{\"config\": options, data[\"category\"]: data, \"heading_level\": heading_level, \"root\": True},\n        )\n\n    def get_aliases(self, identifier: str) -&gt; tuple[str, ...]:\n        \"\"\"Return the aliases of an identifier.\"\"\"\n        try:\n            data = self.collect(identifier, self.fallback_config)\n            return (data[\"path\"],)\n        except (CollectionError, KeyError):\n            return ()\n\n    def update_env(self, config: dict) -&gt; None:  # noqa: ARG002,D102\n        self.env.trim_blocks = True\n        self.env.lstrip_blocks = True\n        self.env.keep_trailing_newline = False\n        self.env.filters[\"brief_xref\"] = do_brief_xref\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler.PythonHandler-attributes","title":"Attributes","text":"<code>default_config: ClassVar[dict]</code> \u00a4 <p>Headings options:</p> <ul> <li><code>heading_level</code> (<code>int</code>): The initial heading level to use. Default: <code>2</code>.</li> <li><code>show_root_heading</code> (<code>bool</code>): Show the heading of the object at the root of the documentation tree     (i.e. the object referenced by the identifier after <code>:::</code>). Default: <code>False</code>.</li> <li><code>show_root_toc_entry</code> (<code>bool</code>): If the root heading is not shown, at least add a ToC entry for it. Default: <code>True</code>.</li> <li><code>show_root_full_path</code> (<code>bool</code>): Show the full Python path for the root object heading. Default: <code>True</code>.</li> <li><code>show_root_members_full_path</code> (<code>bool</code>): Show the full Python path of the root members. Default: <code>False</code>.</li> <li><code>show_object_full_path</code> (<code>bool</code>): Show the full Python path of every object. Default: <code>False</code>.</li> <li><code>show_category_heading</code> (<code>bool</code>): When grouped by categories, show a heading for each category. Default: <code>False</code>.</li> </ul> <p>Members options:</p> <ul> <li><code>members</code> (<code>list[str] | False | None</code>): An explicit list of members to render. Default: <code>None</code>.</li> <li><code>members_order</code> (<code>str</code>): The members ordering to use. Options: <code>alphabetical</code> - order by the members names,     <code>source</code> - order members as they appear in the source file. Default: <code>\"alphabetical\"</code>.</li> <li><code>filters</code> (<code>list[str] | None</code>): A list of filters applied to filter objects based on their name.     A filter starting with <code>!</code> will exclude matching objects instead of including them.     The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively     to lower members in the hierarchy). Default: <code>[\"!^_[^_]\"]</code>.</li> <li><code>group_by_category</code> (<code>bool</code>): Group the object's children by categories: attributes, classes, functions, and modules. Default: <code>True</code>.</li> </ul> <p>Docstrings options:</p> <ul> <li><code>docstring_style</code> (<code>str</code>): The docstring style to use: <code>google</code>, <code>numpy</code>, <code>restructured-text</code>, or <code>None</code>. Default: <code>\"google\"</code>.</li> <li><code>docstring_options</code> (<code>dict</code>): The options for the docstring parser. See parsers under <code>pytkdocs.parsers.docstrings</code>.</li> <li><code>show_if_no_docstring</code> (<code>bool</code>): Show the object heading even if it has no docstring or children with docstrings. Default: <code>False</code>.</li> </ul> <p>Signatures/annotations options:</p> <ul> <li><code>show_signature</code> (<code>bool</code>): Show methods and functions signatures. Default: <code>True</code>.</li> <li><code>show_signature_annotations</code> (<code>bool</code>): Show the type annotations in methods and functions signatures. Default: <code>False</code>.</li> </ul> <p>Additional options:</p> <ul> <li><code>show_bases</code> (<code>bool</code>): Show the base classes of a class. Default: <code>True</code>.</li> <li><code>show_source</code> (<code>bool</code>): Show the source code of this object. Default: <code>True</code>.</li> </ul> <code>domain: ClassVar[str]</code> \u00a4 <p>The domain of the handler.</p> <code>enable_inventory: ClassVar[bool]</code> \u00a4 <p>Whether the handler supports inventory files.</p> <code>fallback_config: ClassVar[dict]</code> \u00a4 <p>The configuration used when falling back to re-collecting an object to get its anchor.</p> <p>This configuration is used in <code>Handlers.get_anchors</code>.</p> <p>When trying to fix (optional) cross-references, the autorefs plugin will try to collect an object with every configured handler until one succeeds. It will then try to get an anchor for it. It's because objects can have multiple identifiers (aliases), for example their definition path and multiple import paths in Python.</p> <p>When re-collecting the object, we have no use for its members, or for its docstring being parsed. This is why the fallback configuration filters every member out, and uses the Markdown style, which we know will not generate any warnings.</p> <code>fallback_theme: ClassVar[str]</code> \u00a4 <p>The fallback theme to use when the user-selected theme is not supported.</p> <code>name: ClassVar[str]</code> \u00a4 <p>The handler name.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler.PythonHandler-methods","title":"Methods","text":"<code>collect(self, identifier: str, options: collections.abc.MutableMapping[str, Any]) -&gt; Any</code> \u00a4 <p>Collect the documentation tree given an identifier and selection options.</p> <p>In this method, we feed one line of JSON to the standard input of the subprocess that was opened during instantiation of the collector. Then we read one line of JSON on its standard output.</p> <p>We load back the JSON text into a Python dictionary. If there is a decoding error, we log it as error and raise a CollectionError.</p> <p>If the dictionary contains an <code>error</code> key, we log it  as error (with the optional <code>traceback</code> value), and raise a CollectionError.</p> <p>If the dictionary values for keys <code>loading_errors</code> and <code>parsing_errors</code> are not empty, we log them as warnings.</p> <p>Then we pick up the only object within the <code>objects</code> list (there's always only one, because we collect them one by one), rebuild it's categories lists (see <code>rebuild_category_lists()</code>), and return it.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>The dotted-path of a Python object available in the Python path.</p> required <code>options</code> <code>collections.abc.MutableMapping[str, Any]</code> <p>Selection options, used to alter the data collection done by <code>pytkdocs</code>.</p> required <p>Exceptions:</p> Type Description <code>CollectionError</code> <p>When there was a problem collecting the object documentation.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The collected object-tree.</p> Source code in <code>python/handler.py</code> <pre><code>def collect(self, identifier: str, options: MutableMapping[str, Any]) -&gt; CollectorItem:\n    \"\"\"Collect the documentation tree given an identifier and selection options.\n\n    In this method, we feed one line of JSON to the standard input of the subprocess that was opened\n    during instantiation of the collector. Then we read one line of JSON on its standard output.\n\n    We load back the JSON text into a Python dictionary.\n    If there is a decoding error, we log it as error and raise a CollectionError.\n\n    If the dictionary contains an `error` key, we log it  as error (with the optional `traceback` value),\n    and raise a CollectionError.\n\n    If the dictionary values for keys `loading_errors` and `parsing_errors` are not empty,\n    we log them as warnings.\n\n    Then we pick up the only object within the `objects` list (there's always only one, because we collect\n    them one by one), rebuild it's categories lists\n    (see [`rebuild_category_lists()`][mkdocstrings_handlers.python.rendering.rebuild_category_lists]),\n    and return it.\n\n    Arguments:\n        identifier: The dotted-path of a Python object available in the Python path.\n        options: Selection options, used to alter the data collection done by `pytkdocs`.\n\n    Raises:\n        CollectionError: When there was a problem collecting the object documentation.\n\n    Returns:\n        The collected object-tree.\n    \"\"\"\n    pytkdocs_options = {}\n    for option in (\"filters\", \"members\", \"docstring_style\", \"docstring_options\"):\n        if option in options:\n            pytkdocs_options[option] = options[option]\n\n    logger.debug(\"Preparing input\")\n    json_input = json.dumps({\"objects\": [{\"path\": identifier, **pytkdocs_options}]})\n\n    logger.debug(\"Writing to process' stdin\")\n    self.process.stdin.write(json_input + \"\\n\")  # type: ignore[union-attr]\n    self.process.stdin.flush()  # type: ignore[union-attr]\n\n    logger.debug(\"Reading process' stdout\")\n    stdout = self.process.stdout.readline()  # type: ignore[union-attr]\n\n    logger.debug(\"Loading JSON output as Python object\")\n    try:\n        result = json.loads(stdout)\n    except json.decoder.JSONDecodeError as exception:\n        error = \"\\n\".join((\"Error while loading JSON:\", stdout, traceback.format_exc()))\n        raise CollectionError(error) from exception\n\n    if \"error\" in result:\n        error = result[\"error\"]\n        if \"traceback\" in result:\n            error += f\"\\n{result['traceback']}\"\n        raise CollectionError(error)\n\n    for loading_error in result[\"loading_errors\"]:\n        logger.warning(loading_error)\n\n    for errors in result[\"parsing_errors\"].values():\n        for parsing_error in errors:\n            logger.warning(parsing_error)\n\n    # We always collect only one object at a time\n    result = result[\"objects\"][0]\n\n    logger.debug(\"Rebuilding categories and children lists\")\n    rebuild_category_lists(result)\n\n    return result\n</code></pre> <code>get_aliases(self, identifier: str) -&gt; tuple[str, ...]</code> \u00a4 <p>Return the aliases of an identifier.</p> Source code in <code>python/handler.py</code> <pre><code>def get_aliases(self, identifier: str) -&gt; tuple[str, ...]:\n    \"\"\"Return the aliases of an identifier.\"\"\"\n    try:\n        data = self.collect(identifier, self.fallback_config)\n        return (data[\"path\"],)\n    except (CollectionError, KeyError):\n        return ()\n</code></pre> <code>get_inventory_urls(self) -&gt; list[tuple[str, dict[str, Any]]]</code> \u00a4 <p>Return the URLs of the inventory files to download.</p> Source code in <code>python/handler.py</code> <pre><code>def get_inventory_urls(self) -&gt; list[tuple[str, dict[str, Any]]]:\n    \"\"\"Return the URLs of the inventory files to download.\"\"\"\n    return [\n        (inv.pop(\"url\"), inv) if isinstance(inv, dict) else (inv, {})\n        for inv in deepcopy(self.config.get(\"import\", []))\n    ]\n</code></pre> <code>get_options(self, local_options: collections.abc.Mapping[str, Any]) -&gt; collections.abc.MutableMapping[str, Any]</code> \u00a4 <p>Return the options to use to collect an object.</p> <p>We merge the global options with the options specific to the object being collected.</p> <p>Parameters:</p> Name Type Description Default <code>local_options</code> <code>collections.abc.Mapping[str, Any]</code> <p>The selection options.</p> required <p>Returns:</p> Type Description <code>collections.abc.MutableMapping[str, Any]</code> <p>The options to use to collect an object.</p> Source code in <code>python/handler.py</code> <pre><code>def get_options(self, local_options: Mapping[str, Any]) -&gt; MutableMapping[str, Any]:\n    \"\"\"Return the options to use to collect an object.\n\n    We merge the global options with the options specific to the object being collected.\n\n    Arguments:\n        local_options: The selection options.\n\n    Returns:\n        The options to use to collect an object.\n    \"\"\"\n    return {**self.default_config, **self.global_options, **local_options}\n</code></pre> <code>load_inventory(in_file: BinaryIO, url: str, base_url: Optional[str] = None, **kwargs: Any) -&gt; collections.abc.Iterator[tuple[str, str]]</code> <code>classmethod</code> \u00a4 <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>This implements mkdocstrings' <code>load_inventory</code> \"protocol\" (see plugin.py).</p> <p>Parameters:</p> Name Type Description Default <code>in_file</code> <code>BinaryIO</code> <p>The binary file-like object to read the inventory from.</p> required <code>url</code> <code>str</code> <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p> required <code>base_url</code> <code>Optional[str]</code> <p>The URL that this inventory's sub-paths are relative to.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Ignore additional arguments passed from the config.</p> <code>{}</code> <p>Yields:</p> Type Description <code>collections.abc.Iterator[tuple[str, str]]</code> <p>Tuples of (item identifier, item URL).</p> Source code in <code>python/handler.py</code> <pre><code>@classmethod\ndef load_inventory(\n    cls,\n    in_file: BinaryIO,\n    url: str,\n    base_url: Optional[str] = None,\n    **kwargs: Any,  # noqa: ARG003\n) -&gt; Iterator[tuple[str, str]]:\n    \"\"\"Yield items and their URLs from an inventory file streamed from `in_file`.\n\n    This implements mkdocstrings' `load_inventory` \"protocol\" (see plugin.py).\n\n    Arguments:\n        in_file: The binary file-like object to read the inventory from.\n        url: The URL that this file is being streamed from (used to guess `base_url`).\n        base_url: The URL that this inventory's sub-paths are relative to.\n        **kwargs: Ignore additional arguments passed from the config.\n\n    Yields:\n        Tuples of (item identifier, item URL).\n    \"\"\"\n    if base_url is None:\n        base_url = posixpath.dirname(url)\n\n    for item in Inventory.parse_sphinx(in_file, domain_filter=(\"py\",)).values():\n        yield item.name, posixpath.join(base_url, item.uri)\n</code></pre> <code>render(self, data: Any, options: collections.abc.MutableMapping[str, Any]) -&gt; str</code> \u00a4 <p>Render the collected data into HTML.</p> Source code in <code>python/handler.py</code> <pre><code>def render(self, data: CollectorItem, options: MutableMapping[str, Any]) -&gt; str:\n    \"\"\"Render the collected data into HTML.\"\"\"\n    template = self.env.get_template(f\"{data['category']}.html\")\n\n    # Heading level is a \"state\" variable, that will change at each step\n    # of the rendering recursion. Therefore, it's easier to use it as a plain value\n    # than as an item in a dictionary.\n    heading_level = options[\"heading_level\"]\n\n    members_order = options[\"members_order\"]\n    if members_order == \"alphabetical\":\n        sort_function = sort_key_alphabetical\n    elif members_order == \"source\":\n        sort_function = sort_key_source\n    else:\n        raise PluginError(f\"Unknown members_order '{members_order}', choose between 'alphabetical' and 'source'.\")\n\n    sort_object(data, sort_function=sort_function)\n\n    return template.render(\n        **{\"config\": options, data[\"category\"]: data, \"heading_level\": heading_level, \"root\": True},\n    )\n</code></pre> <code>teardown(self) -&gt; None</code> \u00a4 <p>Terminate the opened subprocess, set it to <code>None</code>.</p> Source code in <code>python/handler.py</code> <pre><code>def teardown(self) -&gt; None:\n    \"\"\"Terminate the opened subprocess, set it to `None`.\"\"\"\n    logger.debug(\"Tearing process down\")\n    self.process.terminate()\n</code></pre> <code>update_env(self, config: dict) -&gt; None</code> \u00a4 <p>Update the Jinja environment.</p> Source code in <code>python/handler.py</code> <pre><code>def update_env(self, config: dict) -&gt; None:  # noqa: ARG002,D102\n    self.env.trim_blocks = True\n    self.env.lstrip_blocks = True\n    self.env.keep_trailing_newline = False\n    self.env.filters[\"brief_xref\"] = do_brief_xref\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler-functions","title":"Functions","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.handler.get_handler","title":"<code>get_handler(handler_config: collections.abc.MutableMapping[str, Any], tool_config: MkDocsConfig, **kwargs: Any) -&gt; PythonHandler</code>","text":"<p>Simply return an instance of <code>PythonHandler</code>.</p> <p>Parameters:</p> Name Type Description Default <code>handler_config</code> <code>collections.abc.MutableMapping[str, Any]</code> <p>The handler configuration.</p> required <code>tool_config</code> <code>MkDocsConfig</code> <p>The tool (SSG) configuration.</p> required <p>Returns:</p> Type Description <code>PythonHandler</code> <p>An instance of <code>PythonHandler</code>.</p> Source code in <code>python/handler.py</code> <pre><code>def get_handler(\n    handler_config: MutableMapping[str, Any],\n    tool_config: MkDocsConfig,\n    **kwargs: Any,\n) -&gt; PythonHandler:\n    \"\"\"Simply return an instance of `PythonHandler`.\n\n    Arguments:\n        handler_config: The handler configuration.\n        tool_config: The tool (SSG) configuration.\n\n    Returns:\n        An instance of `PythonHandler`.\n    \"\"\"\n    base_dir = Path(tool_config.config_file_path or \"./mkdocs.yml\").parent\n    return PythonHandler(config=dict(handler_config), base_dir=base_dir, **kwargs)\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering","title":"<code>rendering</code>","text":"<p>This module implements rendering utilities.</p>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering-functions","title":"Functions","text":""},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering.do_brief_xref","title":"<code>do_brief_xref(path: str) -&gt; Markup</code>","text":"<p>Filter to create cross-reference with brief text and full identifier as hover text.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to shorten and render.</p> required <p>Returns:</p> Type Description <code>Markup</code> <p>A span containing the brief cross-reference and the full one on hover.</p> Source code in <code>python/rendering.py</code> <pre><code>def do_brief_xref(path: str) -&gt; Markup:\n    \"\"\"Filter to create cross-reference with brief text and full identifier as hover text.\n\n    Arguments:\n        path: The path to shorten and render.\n\n    Returns:\n        A span containing the brief cross-reference and the full one on hover.\n    \"\"\"\n    brief = path.split(\".\")[-1]\n    return Markup(\"&lt;autoref identifier={path} optional hover&gt;{brief}&lt;/autoref&gt;\").format(path=path, brief=brief)\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering.rebuild_category_lists","title":"<code>rebuild_category_lists(obj: dict) -&gt; None</code>","text":"<p>Recursively rebuild the category lists of a collected object.</p> <p>Since <code>pytkdocs</code> dumps JSON on standard output, it must serialize the object-tree and flatten it to reduce data duplication and avoid cycle-references. Indeed, each node of the object-tree has a <code>children</code> list, containing all children, and another list for each category of children: <code>attributes</code>, <code>classes</code>, <code>functions</code>, <code>methods</code> and <code>modules</code>. It replaces the values in category lists with only the paths of the objects.</p> <p>Here, we reconstruct these category lists by picking objects in the <code>children</code> list using their path.</p> <p>For each object, we recurse on every one of its children.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>dict</code> <p>The collected object, loaded back from JSON into a Python dictionary.</p> required Source code in <code>python/rendering.py</code> <pre><code>def rebuild_category_lists(obj: dict) -&gt; None:\n    \"\"\"Recursively rebuild the category lists of a collected object.\n\n    Since `pytkdocs` dumps JSON on standard output, it must serialize the object-tree and flatten it to reduce data\n    duplication and avoid cycle-references. Indeed, each node of the object-tree has a `children` list, containing\n    all children, and another list for each category of children: `attributes`, `classes`, `functions`, `methods`\n    and `modules`. It replaces the values in category lists with only the paths of the objects.\n\n    Here, we reconstruct these category lists by picking objects in the `children` list using their path.\n\n    For each object, we recurse on every one of its children.\n\n    Arguments:\n        obj: The collected object, loaded back from JSON into a Python dictionary.\n    \"\"\"\n    for category in (\"attributes\", \"classes\", \"functions\", \"methods\", \"modules\"):\n        obj[category] = [obj[\"children\"][path] for path in obj[category]]\n    obj[\"children\"] = [child for _, child in obj[\"children\"].items()]\n    for child in obj[\"children\"]:\n        rebuild_category_lists(child)\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering.sort_key_alphabetical","title":"<code>sort_key_alphabetical(item: Any) -&gt; Any</code>","text":"<p>Return an item's name or the final unicode character.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>A collected item.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Name or final unicode character.</p> Source code in <code>python/rendering.py</code> <pre><code>def sort_key_alphabetical(item: CollectorItem) -&gt; Any:\n    \"\"\"Return an item's name or the final unicode character.\n\n    Arguments:\n        item: A collected item.\n\n    Returns:\n        Name or final unicode character.\n    \"\"\"\n    # chr(sys.maxunicode) is a string that contains the final unicode\n    # character, so if 'name' isn't found on the object, the item will go to\n    # the end of the list.\n    return item.get(\"name\", chr(sys.maxunicode))\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering.sort_key_source","title":"<code>sort_key_source(item: Any) -&gt; Any</code>","text":"<p>Return an item's starting line number or -1.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>A collected item.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Starting line number or -1.</p> Source code in <code>python/rendering.py</code> <pre><code>def sort_key_source(item: CollectorItem) -&gt; Any:\n    \"\"\"Return an item's starting line number or -1.\n\n    Arguments:\n        item: A collected item.\n\n    Returns:\n        Starting line number or -1.\n    \"\"\"\n    # if 'line_start' isn't found on the object, the item will go to\n    # the start of the list.\n    return item.get(\"source\", {}).get(\"line_start\", -1)\n</code></pre>"},{"location":"reference/mkdocstrings_handlers/python/#mkdocstrings_handlers.python.rendering.sort_object","title":"<code>sort_object(obj: Any, sort_function: Callable[[Any], Any]) -&gt; None</code>","text":"<p>Sort the collected object's children.</p> <p>Sorts the object's children list, then each category separately, and then recurses into each.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The collected object, as a dict. Note that this argument is mutated.</p> required <code>sort_function</code> <code>Callable[[Any], Any]</code> <p>The sort key function used to determine the order of elements.</p> required Source code in <code>python/rendering.py</code> <pre><code>def sort_object(obj: CollectorItem, sort_function: Callable[[CollectorItem], Any]) -&gt; None:\n    \"\"\"Sort the collected object's children.\n\n    Sorts the object's children list, then each category separately, and then recurses into each.\n\n    Arguments:\n        obj: The collected object, as a dict. Note that this argument is mutated.\n        sort_function: The sort key function used to determine the order of elements.\n    \"\"\"\n    obj[\"children\"].sort(key=sort_function)\n\n    for category in (\"attributes\", \"classes\", \"functions\", \"methods\", \"modules\"):\n        obj[category].sort(key=sort_function)\n\n    for child in obj[\"children\"]:\n        sort_object(child, sort_function=sort_function)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}